{"nbformat":4,"nbformat_minor":5,"cells":[{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fHjlmKs-JKog","executionInfo":{"status":"ok","timestamp":1754446238815,"user_tz":180,"elapsed":20785,"user":{"displayName":"Ana Clara Vicente Dos Santos","userId":"15695527793191392134"}},"outputId":"41759ee2-e631-4580-8e0e-88742f1f31eb"},"id":"fHjlmKs-JKog","execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"markdown","metadata":{"id":"Iiypn6qewFTY"},"source":["## 1. Configuração Inicial\n","\n","\n"],"id":"Iiypn6qewFTY"},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qICp1oUmwFTZ","executionInfo":{"status":"ok","timestamp":1754684987613,"user_tz":180,"elapsed":11220,"user":{"displayName":"Ana Clara Vicente Dos Santos","userId":"15695527793191392134"}},"outputId":"1cd53d07-976d-438b-fb0a-4f17367f0215"},"outputs":[{"output_type":"stream","name":"stdout","text":["Diretório raiz do projeto: /\n","Diretório de dados brutos: /data/raw\n","Diretório de dados processados: /data/processed\n","Diretório de figuras: /reports/figures\n","Collecting PyPDF2==3.0.1\n","  Downloading pypdf2-3.0.1-py3-none-any.whl.metadata (6.8 kB)\n","Downloading pypdf2-3.0.1-py3-none-any.whl (232 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m232.6/232.6 kB\u001b[0m \u001b[31m13.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: PyPDF2\n","Successfully installed PyPDF2-3.0.1\n"]}],"source":["import os\n","import sys\n","\n","# Adiciona o diretório 'src' ao PATH para importar os módulos\n","project_root = os.path.abspath(os.path.join(os.getcwd(), os.pardir))\n","src_dir = os.path.join(project_root, 'src')\n","if src_dir not in sys.path:\n","    sys.path.append(src_dir)\n","\n","# Verifica se as pastas de dados existem, caso contrário, cria-as\n","raw_data_dir = os.path.join(project_root, 'data', 'raw')\n","processed_data_dir = os.path.join(project_root, 'data', 'processed')\n","figures_dir = os.path.join(project_root, 'reports', 'figures')\n","\n","os.makedirs(raw_data_dir, exist_ok=True)\n","os.makedirs(processed_data_dir, exist_ok=True)\n","os.makedirs(figures_dir, exist_ok=True)\n","\n","print(f'Diretório raiz do projeto: {project_root}')\n","print(f'Diretório de dados brutos: {raw_data_dir}')\n","print(f'Diretório de dados processados: {processed_data_dir}')\n","print(f'Diretório de figuras: {figures_dir}')\n","\n","!pip install PyPDF2==3.0.1"],"id":"qICp1oUmwFTZ"},{"cell_type":"markdown","metadata":{"id":"eG8k4aiUwFTa"},"source":["## 2. Coleta de Dados\n","\n","\n"],"id":"eG8k4aiUwFTa"},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Etuch57lwFTa","executionInfo":{"status":"ok","timestamp":1754684997642,"user_tz":180,"elapsed":5339,"user":{"displayName":"Ana Clara Vicente Dos Santos","userId":"15695527793191392134"}},"outputId":"a84d745e-8e82-4496-8758-7d0987656b25"},"outputs":[{"output_type":"stream","name":"stdout","text":["Coletando dados do Cetic.br de: https://cetic.br/pt/tics/domicilios/2024/individuos/B1/expandido\n","Coleta do Cetic.br concluída (lógica de extração pendente).\n","Coletando dados do Dados Abertos SP de: https://dadosabertos.sp.gov.br/group/ciencia-e-tecnologia\n","Coleta do Dados Abertos SP concluída (lógica de extração pendente).\n","Baixando PDF da Nossa São Paulo de: https://nossasaopaulo.org.br/wp-content/uploads/2022/11/Mapa-da-Desigualdade-2022_Tabelas.pdf\n","PDF baixado com sucesso para: /data/raw/Mapa_da_Desigualdade_2022_Tabelas.pdf\n","\n","Coleta de dados brutos concluída. Verifique a pasta 'data/raw'.\n"]}],"source":["import requests\n","from bs4 import BeautifulSoup\n","import pandas as pd\n","import os\n","\n","def collect_cetic_data(url):\n","    \"\"\"Coleta dados do Cetic.br.\"\"\"\n","    print(f\"Coletando dados do Cetic.br de: {url}\")\n","    try:\n","        response = requests.get(url)\n","        response.raise_for_status()  # Levanta um erro para códigos de status HTTP ruins\n","        soup = BeautifulSoup(response.text, 'html.parser')\n","        # TODO: Implementar a lógica de extração de dados específica para o site do Cetic.br\n","        # Isso pode envolver encontrar tabelas, links para CSV/Excel, etc.\n","        print(\"Coleta do Cetic.br concluída (lógica de extração pendente).\")\n","        return soup.prettify() # Retorna o HTML para inspeção inicial\n","    except requests.exceptions.RequestException as e:\n","        print(f\"Erro ao coletar dados do Cetic.br: {e}\")\n","        return None\n","\n","def collect_dados_abertos_sp(url):\n","    \"\"\"Coleta dados do portal Dados Abertos SP.\"\"\"\n","    print(f\"Coletando dados do Dados Abertos SP de: {url}\")\n","    try:\n","        response = requests.get(url)\n","        response.raise_for_status()\n","        soup = BeautifulSoup(response.text, 'html.parser')\n","        # TODO: Implementar a lógica de extração de dados específica para o portal Dados Abertos SP\n","        # Geralmente envolve encontrar links para datasets (CSV, JSON, etc.)\n","        print(\"Coleta do Dados Abertos SP concluída (lógica de extração pendente).\")\n","        return soup.prettify() # Retorna o HTML para inspeção inicial\n","    except requests.exceptions.RequestException as e:\n","        print(f\"Erro ao coletar dados do Dados Abertos SP: {e}\")\n","        return None\n","\n","def collect_nossa_sao_paulo_pdf(url, output_path):\n","    \"\"\"Baixa o PDF do Mapa da Desigualdade da Nossa São Paulo.\"\"\"\n","    print(f\"Baixando PDF da Nossa São Paulo de: {url}\")\n","    try:\n","        response = requests.get(url, stream=True)\n","        response.raise_for_status()\n","        with open(output_path, 'wb') as f:\n","            for chunk in response.iter_content(chunk_size=8192):\n","                f.write(chunk)\n","        print(f\"PDF baixado com sucesso para: {output_path}\")\n","        return output_path\n","    except requests.exceptions.RequestException as e:\n","        print(f\"Erro ao baixar PDF da Nossa São Paulo: {e}\")\n","        return None\n","\n","# if __name__ == \"__main__\":\n","    # URLs das fontes de dados\n","cetic_url = \"https://cetic.br/pt/tics/domicilios/2024/individuos/B1/expandido\"\n","dados_abertos_sp_url = \"https://dadosabertos.sp.gov.br/group/ciencia-e-tecnologia\"\n","nossa_sao_paulo_url = \"https://nossasaopaulo.org.br/wp-content/uploads/2022/11/Mapa-da-Desigualdade-2022_Tabelas.pdf\"\n","\n","    # Caminho para salvar os dados brutos\n","raw_data_dir = os.path.join(project_root, 'data', 'raw')\n","os.makedirs(raw_data_dir, exist_ok=True)\n","\n","    # Coleta de dados do Cetic.br\n","cetic_html = collect_cetic_data(cetic_url)\n","if cetic_html:\n","    with open(os.path.join(raw_data_dir, 'cetic_domicilios_2024.html'), 'w', encoding='utf-8') as f:\n","        f.write(cetic_html)\n","\n","    # Coleta de dados do Dados Abertos SP\n","dados_abertos_sp_html = collect_dados_abertos_sp(dados_abertos_sp_url)\n","if dados_abertos_sp_html:\n","    with open(os.path.join(raw_data_dir, 'dados_abertos_sp_ciencia_tecnologia.html'), 'w', encoding='utf-8') as f:\n","        f.write(dados_abertos_sp_html)\n","\n","    # Baixar PDF da Nossa São Paulo\n","nossa_sao_paulo_pdf_path = os.path.join(raw_data_dir, 'Mapa_da_Desigualdade_2022_Tabelas.pdf')\n","collect_nossa_sao_paulo_pdf(nossa_sao_paulo_url, nossa_sao_paulo_pdf_path)\n","\n","print(\"\\nColeta de dados brutos concluída. Verifique a pasta 'data/raw'.\")\n","\n","\n"],"id":"Etuch57lwFTa"},{"cell_type":"markdown","metadata":{"id":"U3xDctRJwFTb"},"source":["## 3. Pré-processamento de Dados\n","\n"],"id":"U3xDctRJwFTb"},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wus_KIFwwFTb","executionInfo":{"status":"ok","timestamp":1754444648988,"user_tz":180,"elapsed":65706,"user":{"displayName":"Ana Clara Vicente Dos Santos","userId":"15695527793191392134"}},"outputId":"7bd4cc8d-29c2-473c-e64f-61ea1e8270c6"},"outputs":[{"output_type":"stream","name":"stdout","text":["Pré-processando dados do Cetic.br de: /data/raw/cetic_domicilios_2024.html\n","Pré-processamento do Cetic.br concluído (lógica de extração e limpeza pendente).\n","Pré-processando dados do Dados Abertos SP de: /data/raw/dados_abertos_sp_ciencia_tecnologia.html\n","Pré-processamento do Dados Abertos SP concluído (lógica de extração e limpeza pendente).\n","Pré-processando dados do PDF da Nossa São Paulo de: /data/raw/Mapa_da_Desigualdade_2022_Tabelas.pdf\n","Extraindo texto do PDF: /data/raw/Mapa_da_Desigualdade_2022_Tabelas.pdf\n","Extração de texto do PDF concluída.\n","Pré-processamento do PDF da Nossa São Paulo concluído (lógica de extração e limpeza pendente).\n","\n","Pré-processamento de dados concluído. Verifique a pasta 'data/processed'.\n"]}],"source":["import pandas as pd\n","import os\n","from PyPDF2 import PdfReader\n","from bs4 import BeautifulSoup\n","\n","def preprocess_cetic_data(html_path):\n","    \"\"\"Pré-processa os dados HTML do Cetic.br.\"\"\"\n","    print(f\"Pré-processando dados do Cetic.br de: {html_path}\")\n","    with open(html_path, 'r', encoding='utf-8') as f:\n","        html_content = f.read()\n","    soup = BeautifulSoup(html_content, 'html.parser')\n","    # TODO: Implementar a lógica de extração e limpeza de dados do HTML do Cetic.br\n","    # Exemplo: encontrar tabelas com pd.read_html(html_content)\n","    # Ou extrair texto específico usando seletores CSS/BeautifulSoup\n","    print(\"Pré-processamento do Cetic.br concluído (lógica de extração e limpeza pendente).\")\n","    return pd.DataFrame() # Retorna um DataFrame vazio por enquanto\n","\n","def preprocess_dados_abertos_sp(html_path):\n","    \"\"\"Pré-processa os dados HTML do Dados Abertos SP.\"\"\"\n","    print(f\"Pré-processando dados do Dados Abertos SP de: {html_path}\")\n","    with open(html_path, 'r', encoding='utf-8') as f:\n","        html_content = f.read()\n","    soup = BeautifulSoup(html_content, 'html.parser')\n","    # TODO: Implementar a lógica de extração e limpeza de dados do HTML do Dados Abertos SP\n","    # Pode ser necessário navegar por links para baixar datasets CSV/JSON\n","    print(\"Pré-processamento do Dados Abertos SP concluído (lógica de extração e limpeza pendente).\")\n","    return pd.DataFrame() # Retorna um DataFrame vazio por enquanto\n","\n","def extract_text_from_pdf(pdf_path):\n","    \"\"\"Extrai texto de um arquivo PDF.\"\"\"\n","    print(f\"Extraindo texto do PDF: {pdf_path}\")\n","    text = \"\"\n","    try:\n","        with open(pdf_path, 'rb') as f:\n","            reader = PdfReader(f)\n","            for page in reader.pages:\n","                text += page.extract_text() + \"\\n\"\n","        print(\"Extração de texto do PDF concluída.\")\n","        return text\n","    except Exception as e:\n","        print(f\"Erro ao extrair texto do PDF: {e}\")\n","        return None\n","\n","def preprocess_nossa_sao_paulo_data(pdf_path):\n","    \"\"\"Pré-processa os dados do PDF da Nossa São Paulo.\"\"\"\n","    print(f\"Pré-processando dados do PDF da Nossa São Paulo de: {pdf_path}\")\n","    pdf_text = extract_text_from_pdf(pdf_path)\n","    if pdf_text:\n","        # TODO: Implementar a lógica de extração de tabelas ou informações específicas do texto do PDF\n","        # Isso pode ser complexo e exigir expressões regulares ou bibliotecas como Camelot/Tabula para tabelas\n","        print(\"Pré-processamento do PDF da Nossa São Paulo concluído (lógica de extração e limpeza pendente).\")\n","        return pd.DataFrame({\"texto_pdf\": [pdf_text]}) # Retorna um DataFrame com o texto completo por enquanto\n","    return pd.DataFrame() # Retorna um DataFrame vazio se a extração falhar\n","\n","# if __name__ == \"__main__\":\n","raw_data_dir = os.path.join(project_root, 'data', 'raw')\n","processed_data_dir = os.path.join(project_root, 'data', 'processed')\n","os.makedirs(processed_data_dir, exist_ok=True)\n","\n","    # Pré-processar dados do Cetic.br\n","cetic_html_path = os.path.join(raw_data_dir, 'cetic_domicilios_2024.html')\n","if os.path.exists(cetic_html_path):\n","    df_cetic = preprocess_cetic_data(cetic_html_path)\n","    if not df_cetic.empty:\n","        df_cetic.to_csv(os.path.join(processed_data_dir, 'cetic_processed.csv'), index=False)\n","\n","    # Pré-processar dados do Dados Abertos SP\n","dados_abertos_sp_html_path = os.path.join(raw_data_dir, 'dados_abertos_sp_ciencia_tecnologia.html')\n","if os.path.exists(dados_abertos_sp_html_path):\n","    df_dados_abertos_sp = preprocess_dados_abertos_sp(dados_abertos_sp_html_path)\n","    if not df_dados_abertos_sp.empty:\n","        df_dados_abertos_sp.to_csv(os.path.join(processed_data_dir, 'dados_abertos_sp_processed.csv'), index=False)\n","\n","    # Pré-processar PDF da Nossa São Paulo\n","nossa_sao_paulo_pdf_path = os.path.join(raw_data_dir, 'Mapa_da_Desigualdade_2022_Tabelas.pdf')\n","if os.path.exists(nossa_sao_paulo_pdf_path):\n","    df_nossa_sao_paulo = preprocess_nossa_sao_paulo_data(nossa_sao_paulo_pdf_path)\n","    if not df_nossa_sao_paulo.empty:\n","        df_nossa_sao_paulo.to_csv(os.path.join(processed_data_dir, 'nossa_sao_paulo_processed.csv'), index=False)\n","\n","print(\"\\nPré-processamento de dados concluído. Verifique a pasta 'data/processed'.\")\n","\n","\n"],"id":"wus_KIFwwFTb"},{"cell_type":"markdown","metadata":{"id":"Uwdy74LowFTb"},"source":["## 4. Análise de Dados e Visualização\n","\n"],"id":"Uwdy74LowFTb"},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iJRFPCJJwFTc","executionInfo":{"status":"ok","timestamp":1754685441862,"user_tz":180,"elapsed":10749,"user":{"displayName":"Ana Clara Vicente Dos Santos","userId":"15695527793191392134"}},"outputId":"ca24694f-be4d-4655-bc15-1a48a285287a"},"outputs":[{"output_type":"stream","name":"stdout","text":["Carregando dados processados...\n","Criando dados de exemplo para demonstração...\n","Dados de exemplo criados: (10, 10)\n","\n","==================================================\n","INICIANDO ANÁLISES\n","==================================================\n","Realizando análise exploratória...\n","\n","=== ESTATÍSTICAS DESCRITIVAS ===\n","       acesso_internet_pct  banda_larga_pct  dispositivos_moveis_pct  \\\n","count            10.000000        10.000000                10.000000   \n","mean             65.805469        45.810714                74.013553   \n","std              12.634625        12.094825                 8.185088   \n","min              47.323344        30.823380                61.625764   \n","25%              53.425960        37.625526                67.797702   \n","50%              68.995470        41.909428                74.392557   \n","75%              74.040544        50.062143                80.050434   \n","max              83.028572        68.796394                87.481159   \n","\n","       computador_pct  cursos_online_pct  teletrabalho_pct  \\\n","count       10.000000          10.000000         10.000000   \n","mean        40.370828          13.223986         10.077438   \n","std         13.723804           3.313143          1.793909   \n","min         22.602064           8.669440          7.649929   \n","25%         28.161861          10.864478          8.810096   \n","50%         40.953947          13.143825         10.027803   \n","75%         51.094251          14.486479         11.616105   \n","max         58.625281          18.673133         12.340580   \n","\n","       empreendedorismo_digital_pct  renda_media     populacao  \n","count                     10.000000    10.000000      10.00000  \n","mean                      12.613139  1639.114413  126629.70000  \n","std                        3.914876   406.554508   61291.96155  \n","min                        8.154501   982.007866   58392.00000  \n","25%                        9.167537  1324.202742   81706.75000  \n","50%                       12.436685  1670.320129  114814.50000  \n","75%                       14.661094  1892.928907  157460.50000  \n","max                       20.114949  2234.833399  259675.00000  \n","Analisando indicadores de inclusão digital...\n","Analisando oportunidades econômicas...\n","Analizando correlações...\n","\n","=== COEFICIENTES DE CORRELAÇÃO ===\n","Internet vs Renda: 0.932\n","Internet vs Cursos Online: 0.624\n","Internet vs Teletrabalho: 0.894\n","Internet vs Empreendedorismo: 0.756\n","Realizando análise de regressão...\n","\n","R² Score: 0.882\n","Coeficientes: [391.94105264 -77.95863486 -40.34747899]\n","Intercepto: 1639.11\n","Gerando relatório resumo...\n","\n","==================================================\n","RESUMO DOS RESULTADOS\n","==================================================\n","Média de acesso à internet: 65.8%\n","Média de renda: R$ 1639.11\n","Região com maior acesso: Grajaú\n","Região com menor acesso: Pirituba\n","Região com maior renda: Grajaú\n","Região com menor renda: Jardim Ângela\n","\n","Análises concluídas. Verifique a pasta 'reports/figures' para os gráficos gerados.\n"]}],"source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","import plotly.express as px\n","import plotly.graph_objects as go\n","from plotly.subplots import make_subplots\n","import os\n","from sklearn.linear_model import LinearRegression\n","from sklearn.metrics import r2_score\n","from sklearn.preprocessing import StandardScaler\n","import warnings\n","warnings.filterwarnings('ignore')\n","\n","# Configuração de estilo para gráficos\n","plt.style.use('seaborn-v0_8')\n","sns.set_palette(\"husl\")\n","\n","class InclusaoDigitalAnalyzer:\n","    def __init__(self, data_dir):\n","        self.data_dir = data_dir\n","        self.figures_dir = os.path.join(os.path.dirname(data_dir), 'reports', 'figures')\n","        os.makedirs(self.figures_dir, exist_ok=True)\n","        self.df_cetic = None\n","        self.df_dados_abertos = None\n","        self.df_nossa_sp = None\n","\n","    def load_data(self):\n","        \"\"\"Carrega os dados processados.\"\"\"\n","        print(\"Carregando dados processados...\")\n","\n","        # Carregar dados do Cetic.br\n","        cetic_path = os.path.join(self.data_dir, 'cetic_processed.csv')\n","        if os.path.exists(cetic_path):\n","            self.df_cetic = pd.read_csv(cetic_path)\n","            print(f\"Dados Cetic carregados: {self.df_cetic.shape}\")\n","\n","        # Carregar dados do Dados Abertos SP\n","        dados_abertos_path = os.path.join(self.data_dir, 'dados_abertos_sp_processed.csv')\n","        if os.path.exists(dados_abertos_path):\n","            self.df_dados_abertos = pd.read_csv(dados_abertos_path)\n","            print(f\"Dados Abertos SP carregados: {self.df_dados_abertos.shape}\")\n","\n","        # Carregar dados da Nossa São Paulo\n","        nossa_sp_path = os.path.join(self.data_dir, 'nossa_sao_paulo_processed.csv')\n","        if os.path.exists(nossa_sp_path):\n","            self.df_nossa_sp = pd.read_csv(nossa_sp_path)\n","            print(f\"Dados Nossa SP carregados: {self.df_nossa_sp.shape}\")\n","\n","    def create_sample_data(self):\n","        \"\"\"Cria dados de exemplo para demonstração das análises.\"\"\"\n","        print(\"Criando dados de exemplo para demonstração...\")\n","\n","        # Dados de exemplo das periferias de São Paulo\n","        periferias = ['Capão Redondo', 'Grajaú', 'Guaianases', 'Itaquera',\n","                     'Jardim Ângela', 'São Mateus', 'Pirituba', 'Brasilândia',\n","                     'Heliópolis', 'Paraisópolis']\n","\n","        np.random.seed(42)  # Para reprodutibilidade\n","\n","        # Simulando dados de inclusão digital e oportunidades econômicas\n","        data = {\n","            'regiao': periferias,\n","            'acesso_internet_pct': np.random.uniform(45, 85, len(periferias)),\n","            'banda_larga_pct': np.random.uniform(30, 70, len(periferias)),\n","            'dispositivos_moveis_pct': np.random.uniform(60, 95, len(periferias)),\n","            'computador_pct': np.random.uniform(20, 60, len(periferias)),\n","            'cursos_online_pct': np.random.uniform(5, 25, len(periferias)),\n","            'teletrabalho_pct': np.random.uniform(2, 15, len(periferias)),\n","            'empreendedorismo_digital_pct': np.random.uniform(3, 18, len(periferias)),\n","            'renda_media': np.random.uniform(800, 2500, len(periferias)),\n","            'populacao': np.random.randint(50000, 300000, len(periferias))\n","        }\n","\n","        self.df_sample = pd.DataFrame(data)\n","\n","        # Criar correlações realistas\n","        # Regiões com maior acesso à internet tendem a ter mais oportunidades\n","        for i, regiao in enumerate(periferias):\n","            base_internet = self.df_sample.loc[i, 'acesso_internet_pct']\n","            # Ajustar outras variáveis baseadas no acesso à internet\n","            self.df_sample.loc[i, 'cursos_online_pct'] = base_internet * 0.2 + np.random.normal(0, 2)\n","            self.df_sample.loc[i, 'teletrabalho_pct'] = base_internet * 0.15 + np.random.normal(0, 1.5)\n","            self.df_sample.loc[i, 'empreendedorismo_digital_pct'] = base_internet * 0.18 + np.random.normal(0, 2)\n","            self.df_sample.loc[i, 'renda_media'] = base_internet * 25 + np.random.normal(0, 200)\n","\n","        # Garantir que os valores estejam dentro de limites realistas\n","        numeric_cols = self.df_sample.select_dtypes(include=np.number).columns\n","        self.df_sample[numeric_cols] = self.df_sample[numeric_cols].clip(lower=0)\n","\n","        print(f\"Dados de exemplo criados: {self.df_sample.shape}\")\n","        return self.df_sample\n","\n","    def exploratory_analysis(self):\n","        \"\"\"Realiza análise exploratória dos dados.\"\"\"\n","        print(\"Realizando análise exploratória...\")\n","\n","        if self.df_sample is None:\n","            self.create_sample_data()\n","\n","        # Estatísticas descritivas\n","        print(\"\\n=== ESTATÍSTICAS DESCRITIVAS ===\")\n","        print(self.df_sample.describe())\n","\n","        # Matriz de correlação\n","        numeric_cols = self.df_sample.select_dtypes(include=[np.number]).columns\n","        correlation_matrix = self.df_sample[numeric_cols].corr()\n","\n","        # Visualizar matriz de correlação\n","        plt.figure(figsize=(12, 10))\n","        sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', center=0,\n","                   square=True, linewidths=0.5)\n","        plt.title('Matriz de Correlação - Inclusão Digital e Oportunidades Econômicas')\n","        plt.tight_layout()\n","        plt.savefig(os.path.join(self.figures_dir, 'matriz_correlacao.png'), dpi=300, bbox_inches='tight')\n","        plt.close()\n","\n","        return correlation_matrix\n","\n","    def analyze_digital_inclusion(self):\n","        \"\"\"Analisa os indicadores de inclusão digital.\"\"\"\n","        print(\"Analisando indicadores de inclusão digital...\")\n","\n","        if self.df_sample is None:\n","            self.create_sample_data()\n","\n","        # Gráfico de barras - Acesso à Internet por região\n","        fig, axes = plt.subplots(2, 2, figsize=(15, 12))\n","\n","        # Acesso à Internet\n","        axes[0,0].bar(self.df_sample['regiao'], self.df_sample['acesso_internet_pct'])\n","        axes[0,0].set_title('Acesso à Internet por Região (%)')\n","        axes[0,0].tick_params(axis='x', rotation=45)\n","\n","        # Banda Larga\n","        axes[0,1].bar(self.df_sample['regiao'], self.df_sample['banda_larga_pct'], color='orange')\n","        axes[0,1].set_title('Acesso à Banda Larga por Região (%)')\n","        axes[0,1].tick_params(axis='x', rotation=45)\n","\n","        # Dispositivos Móveis\n","        axes[1,0].bar(self.df_sample['regiao'], self.df_sample['dispositivos_moveis_pct'], color='green')\n","        axes[1,0].set_title('Acesso a Dispositivos Móveis por Região (%)')\n","        axes[1,0].tick_params(axis='x', rotation=45)\n","\n","        # Computadores\n","        axes[1,1].bar(self.df_sample['regiao'], self.df_sample['computador_pct'], color='red')\n","        axes[1,1].set_title('Acesso a Computadores por Região (%)')\n","        axes[1,1].tick_params(axis='x', rotation=45)\n","\n","        plt.tight_layout()\n","        plt.savefig(os.path.join(self.figures_dir, 'inclusao_digital_indicadores.png'), dpi=300, bbox_inches='tight')\n","        plt.close()\n","\n","        # Gráfico interativo com Plotly\n","        fig = make_subplots(\n","            rows=2, cols=2,\n","            subplot_titles=('Acesso à Internet', 'Banda Larga', 'Dispositivos Móveis', 'Computadores'),\n","            specs=[[{\"secondary_y\": False}, {\"secondary_y\": False}],\n","                   [{\"secondary_y\": False}, {\"secondary_y\": False}]]\n","        )\n","\n","        fig.add_trace(go.Bar(x=self.df_sample['regiao'], y=self.df_sample['acesso_internet_pct'],\n","                            name='Internet'), row=1, col=1)\n","        fig.add_trace(go.Bar(x=self.df_sample['regiao'], y=self.df_sample['banda_larga_pct'],\n","                            name='Banda Larga'), row=1, col=2)\n","        fig.add_trace(go.Bar(x=self.df_sample['regiao'], y=self.df_sample['dispositivos_moveis_pct'],\n","                            name='Móveis'), row=2, col=1)\n","        fig.add_trace(go.Bar(x=self.df_sample['regiao'], y=self.df_sample['computador_pct'],\n","                            name='Computadores'), row=2, col=2)\n","\n","        fig.update_layout(height=600, showlegend=False, title_text=\"Indicadores de Inclusão Digital por Região\")\n","        fig.write_html(os.path.join(self.figures_dir, 'inclusao_digital_interativo.html'))\n","\n","    def analyze_economic_opportunities(self):\n","        \"\"\"Analisa as oportunidades econômicas.\"\"\"\n","        print(\"Analisando oportunidades econômicas...\")\n","\n","        if self.df_sample is None:\n","            self.create_sample_data()\n","\n","        # Gráfico de oportunidades econômicas\n","        fig, axes = plt.subplots(2, 2, figsize=(15, 12))\n","\n","        # Cursos Online\n","        axes[0,0].bar(self.df_sample['regiao'], self.df_sample['cursos_online_pct'])\n","        axes[0,0].set_title('Acesso a Cursos Online por Região (%)')\n","        axes[0,0].tick_params(axis='x', rotation=45)\n","\n","        # Teletrabalho\n","        axes[0,1].bar(self.df_sample['regiao'], self.df_sample['teletrabalho_pct'], color='orange')\n","        axes[0,1].set_title('Teletrabalho por Região (%)')\n","        axes[0,1].tick_params(axis='x', rotation=45)\n","\n","        # Empreendedorismo Digital\n","        axes[1,0].bar(self.df_sample['regiao'], self.df_sample['empreendedorismo_digital_pct'], color='green')\n","        axes[1,0].set_title('Empreendedorismo Digital por Região (%)')\n","        axes[1,0].tick_params(axis='x', rotation=45)\n","\n","        # Renda Média\n","        axes[1,1].bar(self.df_sample['regiao'], self.df_sample['renda_media'], color='red')\n","        axes[1,1].set_title('Renda Média por Região (R$)')\n","        axes[1,1].tick_params(axis='x', rotation=45)\n","\n","        plt.tight_layout()\n","        plt.savefig(os.path.join(self.figures_dir, 'oportunidades_economicas.png'), dpi=300, bbox_inches='tight')\n","        plt.close()\n","\n","    def correlation_analysis(self):\n","        \"\"\"Analisa correlações entre inclusão digital e oportunidades econômicas.\"\"\"\n","        print(\"Analizando correlações...\")\n","\n","        if self.df_sample is None:\n","            self.create_sample_data()\n","\n","        # Scatter plots para visualizar correlações\n","        fig, axes = plt.subplots(2, 2, figsize=(15, 12))\n","\n","        # Internet vs Renda\n","        axes[0,0].scatter(self.df_sample['acesso_internet_pct'], self.df_sample['renda_media'])\n","        axes[0,0].set_xlabel('Acesso à Internet (%)')\n","        axes[0,0].set_ylabel('Renda Média (R$)')\n","        axes[0,0].set_title('Correlação: Internet vs Renda')\n","\n","        # Internet vs Cursos Online\n","        axes[0,1].scatter(self.df_sample['acesso_internet_pct'], self.df_sample['cursos_online_pct'])\n","        axes[0,1].set_xlabel('Acesso à Internet (%)')\n","        axes[0,1].set_ylabel('Cursos Online (%)')\n","        axes[0,1].set_title('Correlação: Internet vs Cursos Online')\n","\n","        # Internet vs Teletrabalho\n","        axes[1,0].scatter(self.df_sample['acesso_internet_pct'], self.df_sample['teletrabalho_pct'])\n","        axes[1,0].set_xlabel('Acesso à Internet (%)')\n","        axes[1,0].set_ylabel('Teletrabalho (%)')\n","        axes[1,0].set_title('Correlação: Internet vs Teletrabalho')\n","\n","        # Internet vs Empreendedorismo Digital\n","        axes[1,1].scatter(self.df_sample['acesso_internet_pct'], self.df_sample['empreendedorismo_digital_pct'])\n","        axes[1,1].set_xlabel('Acesso à Internet (%)')\n","        axes[1,1].set_ylabel('Empreendedorismo Digital (%)')\n","        axes[1,1].set_title('Correlação: Internet vs Empreendedorismo')\n","\n","        plt.tight_layout()\n","        plt.savefig(os.path.join(self.figures_dir, 'correlacoes_scatter.png'), dpi=300, bbox_inches='tight')\n","        plt.close()\n","\n","        # Calcular coeficientes de correlação\n","        correlations = {\n","            'Internet vs Renda': self.df_sample['acesso_internet_pct'].corr(self.df_sample['renda_media']),\n","            'Internet vs Cursos Online': self.df_sample['acesso_internet_pct'].corr(self.df_sample['cursos_online_pct']),\n","            'Internet vs Teletrabalho': self.df_sample['acesso_internet_pct'].corr(self.df_sample['teletrabalho_pct']),\n","            'Internet vs Empreendedorismo': self.df_sample['acesso_internet_pct'].corr(self.df_sample['empreendedorismo_digital_pct'])\n","        }\n","\n","        print(\"\\n=== COEFICIENTES DE CORRELAÇÃO ===\")\n","        for key, value in correlations.items():\n","            print(f\"{key}: {value:.3f}\")\n","\n","        return correlations\n","\n","    def regression_analysis(self):\n","        \"\"\"Realiza análise de regressão.\"\"\"\n","        print(\"Realizando análise de regressão...\")\n","\n","        if self.df_sample is None:\n","            self.create_sample_data()\n","\n","        # Preparar dados para regressão\n","        X = self.df_sample[['acesso_internet_pct', 'banda_larga_pct', 'computador_pct']].values\n","        y = self.df_sample['renda_media'].values\n","\n","        # Normalizar dados\n","        scaler = StandardScaler()\n","        X_scaled = scaler.fit_transform(X)\n","\n","        # Ajustar modelo de regressão\n","        model = LinearRegression()\n","        model.fit(X_scaled, y)\n","\n","        # Fazer predições\n","        y_pred = model.predict(X_scaled)\n","        r2 = r2_score(y, y_pred)\n","\n","        print(f\"\\nR² Score: {r2:.3f}\")\n","        print(f\"Coeficientes: {model.coef_}\")\n","        print(f\"Intercepto: {model.intercept_:.2f}\")\n","\n","        # Visualizar resultados da regressão\n","        plt.figure(figsize=(10, 6))\n","        plt.scatter(y, y_pred, alpha=0.7)\n","        plt.plot([y.min(), y.max()], [y.min(), y.max()], 'r--', lw=2)\n","        plt.xlabel('Renda Real (R$)')\n","        plt.ylabel('Renda Predita (R$)')\n","        plt.title(f'Regressão Linear: Renda vs Indicadores Digitais (R² = {r2:.3f})')\n","        plt.tight_layout()\n","        plt.savefig(os.path.join(self.figures_dir, 'regressao_linear.png'), dpi=300, bbox_inches='tight')\n","        plt.close()\n","\n","        return model, r2\n","\n","    def generate_summary_report(self):\n","        \"\"\"Gera um relatório resumo das análises.\"\"\"\n","        print(\"Gerando relatório resumo...\")\n","\n","        if self.df_sample is None:\n","            self.create_sample_data()\n","\n","        # Calcular estatísticas resumo\n","        stats = {\n","            'media_acesso_internet': self.df_sample['acesso_internet_pct'].mean(),\n","            'media_renda': self.df_sample['renda_media'].mean(),\n","            'regiao_maior_acesso': self.df_sample.loc[self.df_sample['acesso_internet_pct'].idxmax(), 'regiao'],\n","            'regiao_menor_acesso': self.df_sample.loc[self.df_sample['acesso_internet_pct'].idxmin(), 'regiao'],\n","            'regiao_maior_renda': self.df_sample.loc[self.df_sample['renda_media'].idxmax(), 'regiao'],\n","            'regiao_menor_renda': self.df_sample.loc[self.df_sample['renda_media'].idxmin(), 'regiao']\n","        }\n","\n","        return stats\n","\n","# if __name__ == \"__main__\":\n","    # Inicializar analisador\n","processed_data_dir = os.path.join(project_root, 'data', 'processed')\n","analyzer = InclusaoDigitalAnalyzer(processed_data_dir)\n","\n","    # Carregar dados (se existirem)\n","analyzer.load_data()\n","\n","    # Criar dados de exemplo para demonstração\n","analyzer.create_sample_data()\n","\n","    # Executar análises\n","print(\"\\n\" + \"=\"*50)\n","print(\"INICIANDO ANÁLISES\")\n","print(\"=\"*50)\n","\n","    # Análise exploratória\n","correlation_matrix = analyzer.exploratory_analysis()\n","\n","    # Análise de inclusão digital\n","analyzer.analyze_digital_inclusion()\n","\n","    # Análise de oportunidades econômicas\n","analyzer.analyze_economic_opportunities()\n","\n","    # Análise de correlações\n","correlations = analyzer.correlation_analysis()\n","\n","    # Análise de regressão\n","model, r2 = analyzer.regression_analysis()\n","\n","    # Relatório resumo\n","stats = analyzer.generate_summary_report()\n","\n","print(\"\\n\" + \"=\"*50)\n","print(\"RESUMO DOS RESULTADOS\")\n","print(\"=\"*50)\n","print(f\"Média de acesso à internet: {stats['media_acesso_internet']:.1f}%\")\n","print(f\"Média de renda: R$ {stats['media_renda']:.2f}\")\n","print(f\"Região com maior acesso: {stats['regiao_maior_acesso']}\")\n","print(f\"Região com menor acesso: {stats['regiao_menor_acesso']}\")\n","print(f\"Região com maior renda: {stats['regiao_maior_renda']}\")\n","print(f\"Região com menor renda: {stats['regiao_menor_renda']}\")\n","\n","print(\"\\nAnálises concluídas. Verifique a pasta 'reports/figures' para os gráficos gerados.\")"],"id":"iJRFPCJJwFTc"}],"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.11.0rc1"},"colab":{"provenance":[{"file_id":"13HFbRuxYyFAwJnmOOSz_5qReeATqBaDO","timestamp":1754700373931}]}}}